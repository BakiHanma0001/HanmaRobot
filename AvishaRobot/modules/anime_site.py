import html

import bs4
import requests
from AvishaRobot import dispatcher
from AvishaRobot.modules.disable import DisableAbleCommandHandler
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, ParseMode,
                      Update)
from telegram.ext import CallbackContext

info_btn = "·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥"
kayo_btn = "·¥ã·¥Ä è·¥è „Ä†"
animespot_btn = "·¥Ä…¥…™·¥ç·¥ás·¥ò·¥è·¥õ ìÅî"
animetm_btn = "·¥Ä…¥…™·¥ç·¥á·¥õ·¥ç ìÅî"
prequel_btn = "‚óÅ ·¥ò Ä·¥á«´·¥ú·¥á ü"
sequel_btn = "s·¥á«´·¥ú·¥á ü ‚ñ∑"
close_btn = "·¥Ñ ü·¥ès·¥á ‚úò"


def site_search(update: Update, context: CallbackContext, site: str):
    message = update.effective_message
    args = message.text.strip().split(" ", 1)
    more_results = True

    try:
        search_query = args[1]
    except IndexError:
        message.reply_text("‚¨§ …¢…™·¥†·¥á s·¥è·¥ç·¥õ ú…™…¥…¢ “ì·¥è Ä s·¥á·¥Ä Ä·¥Ñ ú...")
        return

    if site == "kayo":
        search_url = f"https://animekayo.com/?s={search_query}"
        html_text = requests.get(search_url).text
        soup = bs4.BeautifulSoup(html_text, "html.parser")
        search_result = soup.find_all("h2", {'class': "title"})

        result = f"‚ùñ <b>s·¥á·¥Ä Ä·¥Ñ ú  Ä·¥ás·¥ú ü·¥õ “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>·¥è…¥</b> <code>·¥Ä…¥…™·¥ç·¥á·¥ã·¥Ä è·¥è</code> ‚è§ÕüÕûÕüÕû‚òÖ\n"
        for entry in search_result:

            if entry.text.strip() == "‚ùñ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö...":
                result = f"‚ùñ <b>…¥·¥è  Ä·¥ás·¥ú ü·¥õ “ì·¥è·¥ú…¥·¥Ö “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>·¥è…¥</b> <code>·¥Ä…¥…™·¥ç·¥á·¥ã·¥Ä è·¥è</code> ‚è§ÕüÕûÕüÕû‚òÖ"
                more_results = False
                break

            post_link = entry.a['href']
            post_name = html.escape(entry.text.strip())
            result += f"‚ùñ <a href='{post_link}'>{post_name}</a>\n"
            
    elif site == "animespot":
        search_url = f"https://dubspotteam.blogspot.com/?q={search_query}"
        html_text = requests.get(search_url).text
        soup = bs4.BeautifulSoup(html_text, "html.parser")
        search_result = soup.find_all("h2", {'class': "title"}) 
        
        result = f"‚ùñ <b>s·¥á·¥Ä Ä·¥Ñ ú  Ä·¥ás·¥ú ü·¥õ “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>·¥è…¥</b> <code>·¥Ä…¥…™·¥ç·¥ás·¥ò·¥è·¥õ·¥Ö·¥ú ô ô·¥á Ä</code> ‚è§ÕüÕûÕüÕû‚òÖ \n"
        for entry in search_result:
                 
           if entry.text.strip() == "‚ùñ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö...":
                result = f"‚ùñ <b>…¥·¥è  Ä·¥ás·¥ú ü·¥õ “ì·¥è·¥ú…¥·¥Ö “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>·¥è…¥</b> <code>·¥Ä…¥…™·¥ç·¥ás·¥ò·¥è·¥õ</code> ‚è§ÕüÕûÕüÕû‚òÖ"
                more_results = False
                break
                
           post_link = entry.a['href']
           post_name = html.escape(entry.text.strip())
           result += f"‚ùñ <a href='{post_link}'>{post_name}</a>\n"
           
    elif site == "animetm":
        search_url = f"https://animetmdubbers.in/?s={search_query}"
        html_text = requests.get(search_url).text
        soup = bs4.BeautifulSoup(html_text, "html.parser")
        search_result = soup.find_all("h2", {'class': "title"}) 
        
        result = f"‚ùñ <b>s·¥á·¥Ä Ä·¥Ñ ú  Ä·¥ás·¥ú ü·¥õ “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>·¥è…¥</b> <code>·¥Ä…¥…™·¥ç·¥á·¥õ·¥ç·¥Ö·¥ú ô ô·¥á Ä</code> ‚è§ÕüÕûÕüÕû‚òÖ  \n"
        for entry in search_result:
                 
           if entry.text.strip() == "‚ùñ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö...":
                result = f"‚ùñ <b>…¥·¥è  Ä·¥ás·¥ú ü·¥õ “ì·¥è·¥ú…¥·¥Ö “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>·¥è…¥</b> <code>·¥Ä…¥…™·¥ç·¥á·¥ã·¥Ä è·¥è</code>"
                more_results = False
                break
                
           post_link = entry.a['href']
           post_name = html.escape(entry.text.strip())
           result += f"‚ùñ <a href='{post_link}'>{post_name}</a>\n"
           
    buttons = [[InlineKeyboardButton("s·¥á·¥á ·¥Ä ü ü  Ä·¥ás·¥ú ü·¥õs", url=search_url)]]

    if more_results:
        message.reply_text(
            result,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(buttons),
            disable_web_page_preview=True)
    else:
        message.reply_text(
            result, parse_mode=ParseMode.HTML, disable_web_page_preview=True)


def kayo(update: Update, context: CallbackContext):
    site_search(update, context, "kayo")
    
def animespot(update: Update, context: CallbackContext):
    site_search(update, context, "animespot")
   
def animetm(update: Update, context: CallbackContext):
    site_search(update, context, "animetm")


__help__ = """

‚¨§ /animetm ‚û• Find anime from animetm dubbers website.
‚¨§ /animespot ‚û• Find anime from animespot website.
‚¨§ /kayo ‚û• Find anime from animekayo website.
‚¨§ /latest ‚û• ·¥õ·¥è s·¥á·¥á  ü·¥Ä·¥õ·¥ás·¥õ ·¥Ä…¥…™·¥ç·¥á ·¥á·¥ò…™s·¥è·¥Ö·¥á
"""
    
__mod_name__ = "·¥Ä…¥…™·¥ç·¥á-s"
KAYO_SEARCH_HANDLER = DisableAbleCommandHandler("kayo", kayo, run_async = True)
ANIMESPOT_SEARCH_HANDLER = DisableAbleCommandHandler("animespot", animespot, run_async = True)
ANIMETM_SEARCH_HANDLER = DisableAbleCommandHandler("animetm", animetm, run_async = True)

dispatcher.add_handler(KAYO_SEARCH_HANDLER)
dispatcher.add_handler(ANIMESPOT_SEARCH_HANDLER)
dispatcher.add_handler(ANIMETM_SEARCH_HANDLER)

__handlers__ = [ KAYO_SEARCH_HANDLER,
     ANIMESPOT_SEARCH_HANDLER,  ANIMETM_SEARCH_HANDLER]

                                                            
